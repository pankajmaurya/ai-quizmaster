[{"question": "What is the main benefit of using the CompletableFuture class in Java 8 for asynchronous programming?", "options": {"a": "It allows you to create and manage threads directly.", "b": "It enables you to define complex synchronous operations.", "c": "It provides a clean and easy-to-use API for managing asynchronous computations.", "d": "It allows you to perform parallel processing without using streams."}, "answer": "c"}, {"question": "What is a lambda expression in Java 8?", "options": {"a": "A way to define a method in an interface.", "b": "A way to define a method in a class.", "c": "A way to define a method without a name.", "d": "A way to define a method with multiple parameters."}, "answer": "c"}, {"question": "What is the purpose of the Stream API in Java 8?", "options": {"a": "To perform input/output operations.", "b": "To manipulate collections of data.", "c": "To create and manage threads.", "d": "To define complex synchronous operations."}, "answer": "b"}, {"question": "What is the difference between a functional interface and a regular interface in Java 8?", "options": {"a": "A functional interface has only one abstract method, while a regular interface can have multiple abstract methods.", "b": "A functional interface can have multiple abstract methods, while a regular interface has only one abstract method.", "c": "A functional interface can have both abstract and non-abstract methods, while a regular interface can have only abstract methods.", "d": "A functional interface can have only non-abstract methods, while a regular interface can have both abstract and non-abstract methods."}, "answer": "a"}, {"question": "What is the purpose of the Optional class in Java 8?", "options": {"a": "To handle null values in a more concise and safe way.", "b": "To perform mathematical operations on numbers.", "c": "To create and manage threads.", "d": "To define complex synchronous operations."}, "answer": "a"}]