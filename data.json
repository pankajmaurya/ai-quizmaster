[{"question": "What is the main benefit of using the CompletableFuture class in Java 8 for asynchronous programming?", "options": {"a": "It allows you to create and manage threads directly.", "b": "It enables you to define complex synchronous operations.", "c": "It provides a clean and easy-to-use API for managing asynchronous computations.", "d": "It allows you to perform parallel processing without using streams."}, "answer": "c"}, {"question": "What is a lambda expression in Java 8?", "options": {"a": "A way to define a method in an interface.", "b": "A way to define a method in a class.", "c": "A way to define a method without a name.", "d": "A way to define a method with multiple parameters."}, "answer": "c"}, {"question": "What is a functional interface in Java 8?", "options": {"a": "An interface that has only one abstract method.", "b": "An interface that has multiple abstract methods.", "c": "An interface that has no abstract methods.", "d": "An interface that has both abstract and default methods."}, "answer": "a"}, {"question": "What is the purpose of the Stream API in Java 8?", "options": {"a": "To perform input and output operations.", "b": "To manipulate collections of data.", "c": "To create and manage threads.", "d": "To define complex synchronous operations."}, "answer": "b"}, {"question": "What is the difference between a parallel stream and a sequential stream in Java 8?", "options": {"a": "A parallel stream processes elements in parallel, while a sequential stream processes elements sequentially.", "b": "A parallel stream processes elements sequentially, while a sequential stream processes elements in parallel.", "c": "A parallel stream processes elements in random order, while a sequential stream processes elements in a specific order.", "d": "A parallel stream processes elements in a specific order, while a sequential stream processes elements in random order."}, "answer": "a"}, {"question": "What is the purpose of the Optional class in Java 8?", "options": {"a": "To handle null values in a more concise and safe way.", "b": "To handle exceptions in a more concise and safe way.", "c": "To handle concurrent access to shared resources.", "d": "To handle input and output operations."}, "answer": "a"}, {"question": "What is the purpose of the forEach method in the Stream API in Java 8?", "options": {"a": "To perform a specified action on each element of the stream.", "b": "To filter the elements of the stream based on a specified condition.", "c": "To transform the elements of the stream into a new stream.", "d": "To sort the elements of the stream in a specified order."}, "answer": "a"}, {"question": "What is the purpose of the map method in the Stream API in Java 8?", "options": {"a": "To perform a specified action on each element of the stream.", "b": "To filter the elements of the stream based on a specified condition.", "c": "To transform the elements of the stream into a new stream.", "d": "To sort the elements of the stream in a specified order."}, "answer": "c"}, {"question": "What is the purpose of the filter method in the Stream API in Java 8?", "options": {"a": "To perform a specified action on each element of the stream.", "b": "To filter the elements of the stream based on a specified condition.", "c": "To transform the elements of the stream into a new stream.", "d": "To sort the elements of the stream in a specified order."}, "answer": "b"}, {"question": "What is the purpose of the reduce method in the Stream API in Java 8?", "options": {"a": "To perform a specified action on each element of the stream.", "b": "To filter the elements of the stream based on a specified condition.", "c": "To transform the elements of the stream into a new stream.", "d": "To combine the elements of the stream into a single value."}, "answer": "d"}]